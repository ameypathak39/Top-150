135. Candy

There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.

You are giving candies to these children subjected to the following requirements:

Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
Return the minimum number of candies you need to have to distribute the candies to the children.

Example 1:

Input: ratings = [1,0,2]
Output: 5
Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

java code

class Solution {
    public int candy(int[] ratings) {
        Stack<int[]> stk = new Stack<>();
        int prev = -1;
        int val = -1;
        int count = 0;
        for(int i : ratings){
            if(stk.size() == 0 || stk.peek()[0] >= i)
                // Each child must have at least one candy
                stk.push(new int[]{i , 1});
                
            
            else if(stk.peek()[0] < i)
                stk.push(new int[]{i , stk.peek()[1] + 1});
                
          }

        while(stk.size() > 0){
            if(prev == -1 || stk.peek()[0] <= prev)
            {  int[] temp = stk.pop();
                prev = temp[0];
                val = temp[1];
            }
            else if(prev < stk.peek()[0]){
                if(val >= stk.peek()[1])
                {
                    prev = stk.pop()[0];
                    val = val + 1;
                }
                else
                 {  int[] temp = stk.pop();
                prev = temp[0];
                val = temp[1];
                }
            }
            count += val;
        }
        return count;
        
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

c++ code

class Solution {
public:
    int candy(vector<int>& ratings) {
       int n = ratings.size();
        int totalCandies = n;
        int i = 1;

        while (i < n) {
            if (ratings[i] == ratings[i - 1]) {
                i++;
                continue;
            }

            int currentPeak = 0;
            while (i < n && ratings[i] > ratings[i - 1]) {
                currentPeak++;
                totalCandies += currentPeak;
                i++;
            }

            if (i == n) {
                return totalCandies;
            }

            int currentValley = 0;
            while (i < n && ratings[i] < ratings[i - 1]) {
                currentValley++;
                totalCandies += currentValley;
                i++;
            }

            totalCandies -= min(currentPeak, currentValley);
        }

        return totalCandies;        
    }
};
